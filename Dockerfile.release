# syntax=docker/dockerfile:1.4
# 使用 Arch Linux 基础镜像，尝试最大程度静态链接非 Glibc 核心库的 RELEASE 版本

# --- OpenCC 和 Marisa 版本 ---
ARG OPENCC_VERSION=1.1.9
ARG MARISA_VERSION=0.2.7

# 阶段 0: 在 Arch Linux 上构建 OpenCC 和 Marisa-trie 静态库
FROM archlinux:latest AS opencc_builder
ARG OPENCC_VERSION
ARG MARISA_VERSION
WORKDIR /opt

# 安装编译依赖
RUN pacman -Syu --noconfirm \
    base-devel \
    cmake \
    wget \
    python \
    git \
    autoconf \
    automake \
    libtool && \
    pacman -Scc --noconfirm

# 下载、编译并安装 Marisa-trie
RUN wget https://github.com/s-yata/marisa-trie/archive/refs/tags/v${MARISA_VERSION}.tar.gz -O marisa.tar.gz && \
    tar xzf marisa.tar.gz && \
    cd marisa-trie-${MARISA_VERSION} && \
    autoreconf -i && \
    # Marisa 正常编译静态库
    ./configure --prefix=/usr/local --enable-static --disable-shared && \
    make -j$(nproc) && \
    make install && \
    cd .. && rm -rf marisa-trie-${MARISA_VERSION} marisa.tar.gz

# 下载 OpenCC 源码
RUN wget https://github.com/BYVoid/OpenCC/archive/refs/tags/ver.${OPENCC_VERSION}.tar.gz -O opencc.tar.gz && \
    tar xzf opencc.tar.gz && \
    rm opencc.tar.gz

# 进入源码目录并尝试修复头文件问题, 然后编译并安装 OpenCC 静态库
RUN cd OpenCC-ver.${OPENCC_VERSION} && \
    echo "Attempting to patch OpenCC source files..." && \
    if [ -f src/SerializedValues.hpp ]; then \
        sed -i '1s/^/#include <cstdint>\n/' src/SerializedValues.hpp && \
        echo "Patched src/SerializedValues.hpp"; \
    fi && \
    if [ -f src/SerializedValues.cpp ]; then \
        sed -i '1s/^/#include <cstdint>\n/' src/SerializedValues.cpp && \
        echo "Patched src/SerializedValues.cpp"; \
    fi && \
    cmake . \
        # *** 修改：将 CMAKE_BUILD_TYPE 设为 Release ***
        -DCMAKE_BUILD_TYPE=Release \
        -DBUILD_SHARED_LIBS=OFF \
        # 确保启用了 Marisa 支持
        -DENABLE_MARISA=ON \
        -DCMAKE_INSTALL_PREFIX=/usr/local && \
    make -j$(nproc) && \
    make install && \
    cd .. && rm -rf OpenCC-ver.${OPENCC_VERSION}

# 阶段 1: Rust 环境准备和依赖编译 (cargo-chef)
FROM archlinux:latest AS chef
WORKDIR /app

RUN pacman -Syu --noconfirm \
    base-devel \
    openssl \
    pkgconf \
    curl \
    git && \
    pacman -Scc --noconfirm

ENV PATH="/root/.cargo/bin:${PATH}"
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable --profile minimal && \
    /root/.cargo/bin/rustup target add x86_64-unknown-linux-gnu && \
    echo 'export PATH=/root/.cargo/bin:$PATH' >> /root/.bashrc

COPY --from=opencc_builder /usr/local /usr/local

RUN cargo install cargo-chef --locked
COPY . .
RUN cargo chef prepare --recipe-path recipe.json

# 阶段 2: 构建所有依赖项 (planner 阶段 - Release 模式)
FROM archlinux:latest AS planner
WORKDIR /app
ENV PATH="/root/.cargo/bin:${PATH}"

COPY --from=opencc_builder /usr/local /usr/local
COPY --from=chef /root/.cargo /root/.cargo
COPY --from=chef /root/.cargo/bin/cargo-chef /usr/local/bin/cargo-chef
COPY --from=chef /app/recipe.json recipe.json

RUN pacman -Syu --noconfirm \
    base-devel \
    openssl \
    pkgconf && \
    pacman -Scc --noconfirm

RUN if [ -f /root/.cargo/bin/rustup ]; then \
        echo "--- Rustup Info (planner stage) ---"; \
        /root/.cargo/bin/rustup show; \
        echo "Setting default toolchain to stable..."; \
        /root/.cargo/bin/rustup default stable; \
        echo "--- End Rustup Info ---"; \
    else \
        echo "Error: Rustup not found in /root/.cargo/bin in planner stage!"; \
        exit 1; \
    fi

ENV OPENCC_STATIC=1
ENV OPENCC_LIB_DIRS=/usr/local/lib
ENV OPENCC_LIBS=opencc:marisa
ENV OPENCC_INCLUDE_DIRS=/usr/local/include
ENV OPENCC_DYLIB_STDCPP=1 

ENV OPENSSL_STATIC=1
# ENV RUSTFLAGS="-C target-feature=+crt-static" # 在 Glibc Release 构建中，此项通常不是必需的
ENV PKG_CONFIG_PATH="/usr/local/lib/pkgconfig:${PKG_CONFIG_PATH}"
ENV PKG_CONFIG_ALL_STATIC=1 

# *** 修改：为 cargo chef cook 添加 --release 标志 ***
RUN cargo chef cook --release --target x86_64-unknown-linux-gnu --recipe-path recipe.json

# 阶段 3: 构建应用程序本身 (Release 模式)
FROM archlinux:latest AS builder
WORKDIR /app
ENV PATH="/root/.cargo/bin:${PATH}"

COPY --from=opencc_builder /usr/local /usr/local
COPY --from=planner /app/target target
COPY --from=planner /root/.cargo /root/.cargo

RUN pacman -Syu --noconfirm \
    base-devel \
    openssl \
    pkgconf && \
    pacman -Scc --noconfirm

COPY . .

RUN if [ -f /root/.cargo/bin/rustup ]; then \
        echo "--- Rustup Info (builder stage) ---"; \
        /root/.cargo/bin/rustup show; \
        echo "Setting default toolchain to stable..."; \
        /root/.cargo/bin/rustup default stable; \
        /root/.cargo/bin/rustup target add x86_64-unknown-linux-gnu; \
        echo "--- End Rustup Info ---"; \
    else \
        echo "Error: Rustup not found in /root/.cargo/bin in builder stage!"; \
        exit 1; \
    fi

# 设置 .cargo/config.toml (与 Debug 版本保持一致，因为链接策略相同)
RUN mkdir -p .cargo && \
    echo '[target.x86_64-unknown-linux-gnu]' > .cargo/config.toml && \
    echo 'linker = "g++"' >> .cargo/config.toml && \
    echo 'rustflags = [' >> .cargo/config.toml && \
    # echo '  "-C", "target-feature=+crt-static",' >> .cargo/config.toml && # 对于 Glibc Release，通常不需要
    echo '  "-C", "link-arg=-Wl,-Bstatic",' >> .cargo/config.toml && \
    echo '  "-C", "link-arg=-lstdc++",' >> .cargo/config.toml && \
    echo '  "-C", "link-arg=-lsupc++",' >> .cargo/config.toml && \
    echo '  "-C", "link-arg=-lgcc_eh",' >> .cargo/config.toml && \
    echo '  "-C", "link-arg=-lgcc",' >> .cargo/config.toml && \
    echo '  "-C", "link-arg=-lpthread",' >> .cargo/config.toml && \
    echo '  "-C", "link-arg=-ldl",' >> .cargo/config.toml && \
    echo '  "-C", "link-arg=-Wl,-Bdynamic"' >> .cargo/config.toml && \
    echo ']' >> .cargo/config.toml

# 环境变量 (与 Debug 版本保持一致)
ENV OPENCC_STATIC=1
ENV OPENCC_LIB_DIRS=/usr/local/lib
ENV OPENCC_LIBS=opencc:marisa
ENV OPENCC_INCLUDE_DIRS=/usr/local/include
ENV OPENCC_DYLIB_STDCPP=1 

ENV PKG_CONFIG_ALLOW_CROSS=1
ENV OPENSSL_STATIC=1
ENV PKG_CONFIG_PATH="/usr/local/lib/pkgconfig:${PKG_CONFIG_PATH}"
ENV PKG_CONFIG_ALL_STATIC=1

# *** 修改：为 cargo build 添加 --release 标志 ***
RUN cargo build --release --target x86_64-unknown-linux-gnu --bin crslab_comments_reptile --verbose
# *** 修改：调整最终二进制文件的源路径和名称 ***
RUN mv target/x86_64-unknown-linux-gnu/release/crslab_comments_reptile /crslab_comments_reptile

# 最终阶段：用于部署的最小镜像
# 既然我们接受动态链接 Glibc，基础镜像应该是包含 Glibc 的
# 例如：FROM archlinux:latest 或 debian:slim 等，而不是 scratch
# 这里为了与您 Debug 版本的最终阶段保持一致，暂时保留 scratch，但请注意其运行限制
# FROM scratch
# COPY --from=builder /crslab_comments_reptile_final /crslab_comments_reptile
# ENTRYPOINT ["/crslab_comments_reptile"]