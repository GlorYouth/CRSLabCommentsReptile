# syntax=docker/dockerfile:1.4
# 用于使用 musl 目标构建 crslabcommentsreptile Rust 应用程序的 Dockerfile

# 阶段 1: 构建依赖 (使用 cargo-chef 进行优化)
# 使用指定的 Rust Alpine 基础镜像
FROM rust:alpine AS chef
WORKDIR /app

# 安装 musl-dev, build-base（用于 C/C++ 编译器），
# opencc-dev（用于 OpenCC 头文件/库），openssl-dev（用于 OpenSSL 头文件/库）
# --- 新增：明确安装 gcc 和 g++，确保所有 C 编译工具链组件可用 ---
RUN apk add --no-cache musl-dev build-base opencc-dev openssl-dev gcc g++
# --- 新增结束 ---

# 安装 cargo-chef 工具
RUN cargo install cargo-chef --locked

# 复制整个项目源代码，确保 cargo-chef 可以访问到 src/main.rs 等文件来分析 Cargo.toml
COPY . .

# 使用 cargo-chef 准备构建食谱（依赖项哈希）
RUN cargo chef prepare --recipe-path recipe.json

# 阶段 2: 构建所有依赖项
FROM rust:alpine AS planner
WORKDIR /app
# 从 chef 阶段复制生成的食谱文件
COPY --from=chef /app/recipe.json recipe.json

# 在 planner 阶段也安装 cargo-chef
RUN cargo install cargo-chef --locked

# 在此阶段重新安装依赖项，以确保它们可用
# --- 新增：明确安装 gcc 和 g++ ---
RUN apk add --no-cache musl-dev build-base opencc-dev openssl-dev gcc g++
# --- 新增结束 ---

# 添加 x86_64-unknown-linux-musl 目标
RUN rustup target add x86_64-unknown-linux-musl

# 设置 RUSTFLAGS 以进行完全静态链接。
# 强制 openssl-sys 静态链接
ENV OPENSSL_STATIC=1
ENV RUSTFLAGS="-C target-feature=+crt-static"

# 构建依赖项的 release 版本，使用 musl 目标
RUN cargo chef cook --release --target x86_64-unknown-linux-musl --recipe-path recipe.json

# 阶段 3: 构建应用程序本身
FROM rust:alpine AS builder
WORKDIR /app
# 从 planner 阶段复制已构建的依赖项和 cargo 注册表缓存
COPY --from=planner /app/target target
COPY --from=planner /usr/local/cargo /usr/local/cargo
# 在此阶段重新安装依赖项，以确保它们可用
# --- 新增：明确安装 gcc 和 g++ ---
RUN apk add --no-cache musl-dev build-base opencc-dev openssl-dev gcc g++
# --- 新增结束 ---

# 复制您的应用程序源代码（这会使此层在源代码更改时失效，以重新编译应用程序）
COPY . .

# 添加 x86_64-unknown-linux-musl 目标（为清晰起见，重复但安全）
RUN rustup target add x86_64-unknown-linux-musl

# 设置 RUSTFLAGS 以进行完全静态链接（为清晰起见，重复但安全）
ENV RUSTFLAGS="-C target-feature=+crt-static"
ENV PKG_CONFIG_ALLOW_CROSS=1
ENV OPENSSL_STATIC=1

# 编译您的 Rust 应用程序的 release 版本，使用 musl 目标
# 根据您的仓库，二进制文件名为 crslabcommentsreptile
RUN cargo build --release --target x86_64-unknown-linux-musl --bin crslabcommentsreptile

# 将最终二进制文件移动到一个已知位置，以便轻松提取
# 此二进制文件将在 builder 容器内部的 /crslabcommentsreptile_final 找到
RUN mv target/x86_64-unknown-linux-musl/release/crslabcommentsreptile /crslabcommentsreptile_final
