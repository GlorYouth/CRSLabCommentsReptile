# syntax=docker/dockerfile:1.4
# Dockerfile for building the crslabcommentsreptile Rust application with musl target

# Stage 1: Build dependencies (using cargo-chef for optimization)
# Use the specified Rust Alpine base image
FROM rust:alpine AS chef
WORKDIR /app

# Install musl-dev, build-base (for C/C++ compiler),
# opencc-dev (for OpenCC headers/libs), and openssl-dev (for OpenSSL headers/libs)
RUN apk add --no-cache musl-dev build-base opencc-dev openssl-dev

# --- 新增步骤：安装 cargo-chef ---
RUN cargo install cargo-chef --locked
# --- 新增步骤结束 ---

# Copy Cargo.toml and Cargo.lock to leverage Docker layer caching for dependencies
COPY Cargo.toml Cargo.lock ./

# Use cargo-chef to prepare the build recipe (dependency hash)
RUN cargo chef prepare --recipe-path recipe.json

# Stage 2: Build all dependencies
FROM rust:alpine AS planner
WORKDIR /app
COPY --from=chef /app/recipe.json recipe.json
# Re-install dependencies in this stage to ensure they are available
RUN apk add --no-cache musl-dev build-base opencc-dev openssl-dev

# Add the x86_64-unknown-linux-musl target
RUN rustup target add x86_64-unknown-linux-musl

# Set RUSTFLAGS for fully static linking.
# openssl-sys crate might require pkg-config for finding libraries.
# Also explicitly linking with -lssl -lcrypto can be needed for openssl-sys
# Check if you use system OpenSSL or rustls. If rustls, this might not be needed.
# If you use openssl-sys and link system openssl, you might need to adjust:
# ENV PKG_CONFIG_ALLOW_CROSS=1 # might be needed for cross-compiling with pkg-config
ENV OPENSSL_STATIC=1 # Forces openssl-sys to link statically
# ENV OPENSSL_DIR=/usr # Points openssl-sys to standard Alpine lib paths
ENV RUSTFLAGS="-C target-feature=+crt-static"

# Cook (build) the dependencies for release with musl target
RUN cargo chef cook --release --target x86_64-unknown-linux-musl --recipe-path recipe.json

# Stage 3: Build the application itself
FROM rust:alpine AS builder
WORKDIR /app
# Copy built dependencies and cargo registry cache from planner stage
COPY --from=planner /app/target target
COPY --from=planner /usr/local/cargo /usr/local/cargo
# Re-install dependencies in this stage to ensure they are available
RUN apk add --no-cache musl-dev build-base opencc-dev openssl-dev

# Copy your application source code
COPY . .

# Add the x86_64-unknown-linux-musl target (redundant but safe for clarity)
RUN rustup target add x86_64-unknown-linux-musl

# Set RUSTFLAGS for fully static linking (redundant but safe for clarity)
ENV RUSTFLAGS="-C target-feature=+crt-static"
ENV PKG_CONFIG_ALLOW_CROSS=1
ENV OPENSSL_STATIC=1
# ENV OPENSSL_DIR=/usr/lib/ssl # Or /usr, depending on how openssl-dev places files

# Compile your Rust application for release with musl target
# The binary name is crslabcommentsreptile as per your repository
RUN cargo build --release --target x86_64-unknown-linux-musl --bin crslabcommentsreptile

# Copy the final binary to a well-known location for easy extraction
# This binary will be found at /crslabcommentsreptile_final inside the builder container
RUN mv target/x86_64-unknown-linux-musl/release/crslabcommentsreptile /crslabcommentsreptile_final
