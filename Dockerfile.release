# syntax=docker/dockerfile:1.4
# 使用 Debian 10 基础镜像，尝试最大程度静态链接非 Glibc 核心库的 RELEASE 版本

# 阶段 1: Rust 环境准备和依赖编译 (cargo-chef)
FROM debian:10-slim AS chef
WORKDIR /app
ENV DEBIAN_FRONTEND=noninteractive

# 安装 Rust 编译所需依赖
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    libssl-dev \
    pkg-config \
    curl \
    git \
    ca-certificates && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# 安装 Rustup 和 stable 工具链
ENV PATH="/root/.cargo/bin:${PATH}"
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable --profile minimal && \
    /root/.cargo/bin/rustup target add x86_64-unknown-linux-gnu && \
    echo 'export PATH=/root/.cargo/bin:$PATH' >> /root/.bashrc

# 安装 cargo-chef
RUN cargo install cargo-chef --locked
# 复制项目文件
COPY . .
# 准备依赖的 recipe
RUN cargo chef prepare --recipe-path recipe.json

# 阶段 2: 构建所有依赖项 (planner 阶段 - Release 模式)
FROM debian:10-slim AS planner
WORKDIR /app
ENV DEBIAN_FRONTEND=noninteractive
ENV PATH="/root/.cargo/bin:${PATH}"

# 复制 rustup 安装的 cargo 和 rustc
COPY --from=chef /root/.cargo /root/.cargo
# 复制 cargo-chef 可执行文件
COPY --from=chef /root/.cargo/bin/cargo-chef /usr/local/bin/cargo-chef
# 复制依赖 recipe
COPY --from=chef /app/recipe.json recipe.json

# 安装构建依赖
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    libssl-dev \
    pkg-config \
    ca-certificates && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# 确保 Rustup 正常工作
RUN if [ -f /root/.cargo/bin/rustup ]; then \
        echo "--- Rustup Info (planner stage) ---"; \
        /root/.cargo/bin/rustup show; \
        echo "Setting default toolchain to stable..."; \
        /root/.cargo/bin/rustup default stable; \
        echo "--- End Rustup Info ---"; \
    else \
        echo "Error: Rustup not found in /root/.cargo/bin in planner stage!"; \
        exit 1; \
    fi

# 设置环境变量以尝试静态链接 OpenSSL 和其他库
ENV OPENSSL_STATIC=1
ENV PKG_CONFIG_PATH="/usr/local/lib/pkgconfig:${PKG_CONFIG_PATH}"
ENV PKG_CONFIG_ALL_STATIC=1 

# 使用 --release 标志编译依赖
RUN cargo chef cook --release --target x86_64-unknown-linux-gnu --recipe-path recipe.json

# 阶段 3: 构建应用程序本身 (Release 模式)
FROM debian:10-slim AS builder
WORKDIR /app
ENV DEBIAN_FRONTEND=noninteractive
ENV PATH="/root/.cargo/bin:${PATH}"

# 复制已编译的依赖和 Rust 工具链
COPY --from=planner /app/target target
COPY --from=planner /root/.cargo /root/.cargo

# 安装构建依赖
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    libssl-dev \
    pkg-config \
    ca-certificates && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# 复制项目源代码
COPY . .

# 再次确认 Rustup 正常工作并添加目标
RUN if [ -f /root/.cargo/bin/rustup ]; then \
        echo "--- Rustup Info (builder stage) ---"; \
        /root/.cargo/bin/rustup show; \
        echo "Setting default toolchain to stable..."; \
        /root/.cargo/bin/rustup default stable; \
        /root/.cargo/bin/rustup target add x86_64-unknown-linux-gnu; \
        echo "--- End Rustup Info ---"; \
    else \
        echo "Error: Rustup not found in /root/.cargo/bin in builder stage!"; \
        exit 1; \
    fi

# 设置 .cargo/config.toml，实现“尽可能静态链接”，但接受 Glibc 核心动态链接
RUN mkdir -p .cargo && \
    echo '[target.x86_64-unknown-linux-gnu]' > .cargo/config.toml && \
    echo 'linker = "g++"' >> .cargo/config.toml && \
    echo 'rustflags = [' >> .cargo/config.toml && \
    echo '  "-C", "link-arg=-Wl,-Bstatic",' >> .cargo/config.toml && \
    echo '  "-C", "link-arg=-lstdc++",' >> .cargo/config.toml && \
    echo '  "-C", "link-arg=-lsupc++",' >> .cargo/config.toml && \
    echo '  "-C", "link-arg=-lgcc_eh",' >> .cargo/config.toml && \
    echo '  "-C", "link-arg=-lgcc",' >> .cargo/config.toml && \
    echo '  "-C", "link-arg=-lpthread",' >> .cargo/config.toml && \
    echo '  "-C", "link-arg=-ldl",' >> .cargo/config.toml && \
    echo '  "-C", "link-arg=-Wl,-Bdynamic"' >> .cargo/config.toml && \
    echo ']' >> .cargo/config.toml

# 设置 PKG_CONFIG 环境变量，以进行交叉编译和静态链接
ENV PKG_CONFIG_ALLOW_CROSS=1
ENV PKG_CONFIG_PATH="/usr/local/lib/pkgconfig:${PKG_CONFIG_PATH}"
ENV PKG_CONFIG_ALL_STATIC=1

# 使用 --release 标志编译应用
RUN cargo build --release --target x86_64-unknown-linux-gnu --bin crslab_comments_reptile --verbose
# 将最终的二进制文件移动到指定位置并重命名
RUN mv target/x86_64-unknown-linux-gnu/release/crslab_comments_reptile /crslab_comments_reptile_final

# 最终阶段：基于一个包含 Glibc 的最小 Debian 镜像
FROM debian:10-slim AS final
WORKDIR /app
# 从构建阶段复制最终的二进制文件
COPY --from=builder /crslab_comments_reptile_final /app/crslab_comments_reptile
# 确保可执行权限
RUN chmod +x /app/crslab_comments_reptile
# 设置工作目录并指定入口点
ENTRYPOINT ["/app/crslab_comments_reptile"]