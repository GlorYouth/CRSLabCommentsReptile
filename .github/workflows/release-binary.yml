# 工作流程的名称，将显示在 GitHub Actions UI 中
name: Build and Release Rust Binary (Manual Trigger)

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Git Tag for the Release (e.g., v1.0.0)' # 参数描述
        required: true 
        type: string 
      build_type: # 新的输入参数，用于选择构建类型
        description: 'Type of build to perform (构建类型选择)'
        required: true
        type: choice
        options:
          - release_only # 只构建 Release 版本
          - debug_only   # 只构建 Debug 版本
          - both         # 同时构建 Release 和 Debug 版本
        default: 'release_only'
      prerelease:
        description: 'Is this a pre-release?' 
        required: false 
        type: boolean 
        default: false 
      draft:
        description: 'Create as a draft release?' 
        required: false 
        type: boolean 
        default: false 

jobs:
  build_and_upload_release_asset:
    runs-on: ubuntu-latest
    permissions:
      contents: write 
    
    outputs: # 定义作业输出，方便后续步骤（如果需要跨作业）或调试
      release_asset_name: ${{ steps.prepare_filenames.outputs.release_asset_name }}
      debug_asset_name: ${{ steps.prepare_filenames.outputs.debug_asset_name }}
      release_built: ${{ steps.build_release.outcome == 'success' }}
      debug_built: ${{ steps.build_debug.outcome == 'success' }}

    steps:
      - name: Checkout code (检出代码)
        uses: actions/checkout@v4

      - name: Prepare filenames and build descriptions (准备文件名和构建描述)
        id: prepare_filenames
        run: |
          release_asset_base="crslab-comments-reptile"
          debug_asset_base="crslab-comments-reptile-debug"
          
          echo "release_asset_name=${release_asset_base}" >> $GITHUB_OUTPUT
          echo "debug_asset_name=${debug_asset_base}" >> $GITHUB_OUTPUT

          build_desc=""
          if [[ "${{ github.event.inputs.build_type }}" == "release_only" ]]; then
            build_desc="发布版本 (Release Build)"
          elif [[ "${{ github.event.inputs.build_type }}" == "debug_only" ]]; then
            build_desc="调试版本 (Debug Build)"
          elif [[ "${{ github.event.inputs.build_type }}" == "both" ]]; then
            build_desc="发布和调试版本 (Release and Debug Builds)"
          fi
          echo "build_type_description=${build_desc}" >> $GITHUB_ENV
          echo "BUILD_TYPE_DESCRIPTION_FOR_RELEASE_NAME=${build_desc}" >> $GITHUB_OUTPUT


      # --- 构建 Release 版本 (条件执行) ---
      - name: Build Release Version (构建 Release 版本)
        id: build_release
        if: github.event.inputs.build_type == 'release_only' || github.event.inputs.build_type == 'both'
        run: |
          echo "Starting Docker build for Release version..."
          docker build -t crslab-builder-release -f Dockerfile.release .
          
          echo "Extracting Release binary from Docker container..."
          docker create --name temp_builder_release crslab-builder-release
          docker cp temp_builder_release:/crslab_comments_reptile_final ./${{ steps.prepare_filenames.outputs.release_asset_name }}
          docker rm temp_builder_release
          
          echo "Release binary '${{ steps.prepare_filenames.outputs.release_asset_name }}' successfully extracted."
          ls -l ./${{ steps.prepare_filenames.outputs.release_asset_name }}
          file ./${{ steps.prepare_filenames.outputs.release_asset_name }}

      # --- 构建 Debug 版本 (条件执行) ---
      - name: Build Debug Version (构建 Debug 版本)
        id: build_debug
        if: github.event.inputs.build_type == 'debug_only' || github.event.inputs.build_type == 'both'
        run: |
          echo "Starting Docker build for Debug version..."
          # 使用 Dockerfile.debug (假设它在仓库根目录)
          docker build -t crslab-builder-debug -f Dockerfile.debug . 
          
          echo "Extracting Debug binary from Docker container..."
          docker create --name temp_builder_debug crslab-builder-debug
          # Debug Dockerfile 将二进制文件放在 /crslab_comments_reptile_debug_final
          docker cp temp_builder_debug:/crslab_comments_reptile_debug_final ./${{ steps.prepare_filenames.outputs.debug_asset_name }}
          docker rm temp_builder_debug
          
          echo "Debug binary '${{ steps.prepare_filenames.outputs.debug_asset_name }}' successfully extracted."
          ls -l ./${{ steps.prepare_filenames.outputs.debug_asset_name }}
          file ./${{ steps.prepare_filenames.outputs.debug_asset_name }}

      # --- 创建 GitHub Release ---
      - name: Create GitHub Release (创建 GitHub Release)
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.tag }}
          name: Release ${{ github.event.inputs.tag }} - CRSLab Comments Reptile (${{ steps.prepare_filenames.outputs.BUILD_TYPE_DESCRIPTION_FOR_RELEASE_NAME }})
          draft: ${{ github.event.inputs.draft }}
          prerelease: ${{ github.event.inputs.prerelease }}
          body: |
            # Release ${{ github.event.inputs.tag }} (${{ env.build_type_description }})

            这是 **CRSLab Comments Reptile** 的一个新版本，针对 Linux (musl) 进行了完全静态构建。

            ## 此版本中的功能/更改:
            - 通过 GitHub Actions workflow_dispatch 手动构建。
            - 构建类型: ${{ env.build_type_description }}.
            - 包含 `opencc` (静态链接) 和 `openssl` (静态链接) 依赖。
            - 小型、静态链接的可执行文件，具有高可移植性。
            - ... (在此处添加您的特定发行说明。)

            ### 下载:
            ${{ (github.event.inputs.build_type == 'release_only' || github.event.inputs.build_type == 'both') && format('- `{0}` (Linux, x86_64, musl 静态链接, 发布版本)', steps.prepare_filenames.outputs.release_asset_name) || '' }}
            ${{ (github.event.inputs.build_type == 'debug_only' || github.event.inputs.build_type == 'both') && format('- `{0}` (Linux, x86_64, musl 静态链接, 调试版本)', steps.prepare_filenames.outputs.debug_asset_name) || '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHU_TOKEN }} # 注意：这里应该是 GITHUB_TOKEN

      # --- 上传 Release Asset (Release 版本) ---
      - name: Upload Release Asset (Release) (上传 Release 版本资源)
        if: success() && (github.event.inputs.build_type == 'release_only' || github.event.inputs.build_type == 'both') && steps.build_release.outcome == 'success'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ steps.prepare_filenames.outputs.release_asset_name }}
          asset_name: ${{ steps.prepare_filenames.outputs.release_asset_name }}
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # --- 上传 Release Asset (Debug 版本) ---
      - name: Upload Release Asset (Debug) (上传 Debug 版本资源)
        if: success() && (github.event.inputs.build_type == 'debug_only' || github.event.inputs.build_type == 'both') && steps.build_debug.outcome == 'success'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ steps.prepare_filenames.outputs.debug_asset_name }}
          asset_name: ${{ steps.prepare_filenames.outputs.debug_asset_name }}
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
